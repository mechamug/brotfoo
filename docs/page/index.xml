<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on A Space For The Generate</title>
    <link>/brotfoo/page/</link>
    <description>Recent content in Pages on A Space For The Generate</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="/brotfoo/page/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cellular Automata</title>
      <link>/brotfoo/page/cellular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/cellular/</guid>
      <description>I am using a variation of a cellular automaton rule I found on Softology&amp;rsquo;s blog post on cellular automata. He uses the neighboring states and increments a cell&amp;rsquo;s state if they exceed a configured threshold.
I was trying to use his update rule for automata with more states, but it would just stall out, because not enough states would match the rule. So, instead I thought I just use a larger range of differences for the surrounding states, but I am still only looking at surrounding cells.</description>
    </item>
    
    <item>
      <title>Conjugate Julia Set</title>
      <link>/brotfoo/page/conjugate-julia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/conjugate-julia/</guid>
      <description>A very simple idea, rendering the Julia set of a point and its complex conjugate in the same picture, overlayed.
import numpy as np import matplotlib.pyplot as plt from os import system from numba import jit from numpy import random as nr import sys @jit def julia(): c = complex(-0.8, 0.156) s, rx, ry, t, it = 2, 3.5, 2.5, 1000, 150 imx, imy = int(2650 * s), int(1600 * s) julia = np.</description>
    </item>
    
    <item>
      <title>Domain Colored Mandelbrot</title>
      <link>/brotfoo/page/domainbrot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/domainbrot/</guid>
      <description>The same as a regular Mandelbrot set, but instead of the boring solid color, the same technique as for some domain coloring approaches is used, with a color index being chosen on the interval $[-\pi, \pi]$, scaled to the range of the maximum iterations chosen, i.e. the escape bound.</description>
    </item>
    
    <item>
      <title>Domain Coloring</title>
      <link>/brotfoo/page/domain-coloring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/domain-coloring/</guid>
      <description>A really simple way to do domain coloring in Python.
 Domain coloring of the function $f(x) = \frac{sinc(z+i)}{tan(z-i)}$:
import numpy as np import matplotlib.pyplot as plt x,y = np.ogrid[-10:6:2560j, -10:10:1600j] f = lambda z: np.sinc(z+i) / np.tan(z-i) plt.imsave(&amp;#39;graph.png&amp;#39;, np.angle(f((x - 1j*y).T)), cmap=&amp;#39;twilight&amp;#39;) Another Example</description>
    </item>
    
    <item>
      <title>Numpy Python Magic</title>
      <link>/brotfoo/page/shortbrot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/shortbrot/</guid>
      <description>It&amp;rsquo;s exciting how compact one can write generation of the mandelbrot in Python with NumPy.
import numpy as n import matplotlib.pyplot as p import functools as f x,y=n.ogrid[-1:1:1000j,-1.5:1.5:1000j] t=x-1j*y p.imshow(n.angle(f.reduce(lambda z,_:z**2+t,[0]*1000,t)), cmap=&amp;#39;twilight&amp;#39;) p.show() Pastel Your reward, another Mandelbrot image.</description>
    </item>
    
    <item>
      <title>The Buddhabrot</title>
      <link>/brotfoo/page/buddhabrot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/buddhabrot/</guid>
      <description>This is an example of what now is commonly called the Buddhabrot. As complex numbers are being iterated on through the Mandelbrot&amp;rsquo;s recurrence relation, coordinates of intermediate complex numbers are marked, as opposed to only coloring points corresponding to their corresponding complex number&amp;rsquo;s iteration count.
 Here is some source code in Python to create it.
from numba import jit from matplotlib.pyplot import imsave from numpy import log, ones from numpy.</description>
    </item>
    
    <item>
      <title>The Folded Mandelbrot</title>
      <link>/brotfoo/page/foldbrot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/foldbrot/</guid>
      <description>A variation on the Mandelbrot set, the folded Mandelbrot.

Try out this Mandelbrot Viewer. My gratitude goes to the original authors of the viewer and libraries.
function countIterations(x, y) { var count = 0; var t = x; x=-y; y=t; var zx = x; var zy = y; var n = 100; var p = 200; while (count &amp;lt; maxIterations &amp;amp;&amp;amp; zx*zx + zy*zy &amp;lt; 20) { if (0==(count+1)%n) { x += zx*count/p; y += zy*count/p; n--; p++; } var new_zx = zx*zx - zy*zy + x; zy = 2*zx*zy + y; zx = new_zx; count++; } var angle = Math.</description>
    </item>
    
    <item>
      <title>The Julia Set</title>
      <link>/brotfoo/page/julia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/brotfoo/page/julia/</guid>
      <description>This is an example of a graphical representation of the Julia set. Click for a higher resolution version.
 Here is some Python code to create it.
import numpy as np import matplotlib.pyplot as plt from os import system from numba import jit from numpy import random as nr import sys @jit def julia(): c = complex(-0.8, 0.156) s, rx, ry, t, it = 2, 3.5, 2.5, 1000, 150 imx, imy = int(2650 * s), int(1600 * s) julia = np.</description>
    </item>
    
  </channel>
</rss>